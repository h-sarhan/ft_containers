==355== Memcheck, a memory error detector
==355== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==355== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==355== Command: ./tests
==355== 
==355== Use of uninitialised value of size 8
==355==    at 0x4267EA: ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::delete_node(ft::node<ft::pair<int const, int> >*) (tree.hpp:183)
==355==    by 0x420396: ft::map<int, int, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::erase(ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >) (map.hpp:305)
==355==    by 0x420247: ft::map<int, int, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::erase(ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >, ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >) (map.hpp:317)
==355==    by 0x41C1F5: hassanErase() (map_tests.cpp:473)
==355==    by 0x41C567: mapTests() (map_tests.cpp:485)
==355==    by 0x414703: main (main.cpp:11)
==355== 
==355== Invalid write of size 8
==355==    at 0x4267EA: ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::delete_node(ft::node<ft::pair<int const, int> >*) (tree.hpp:183)
==355==    by 0x420396: ft::map<int, int, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::erase(ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >) (map.hpp:305)
==355==    by 0x420247: ft::map<int, int, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::erase(ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >, ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >) (map.hpp:317)
==355==    by 0x41C1F5: hassanErase() (map_tests.cpp:473)
==355==    by 0x41C567: mapTests() (map_tests.cpp:485)
==355==    by 0x414703: main (main.cpp:11)
==355==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==355== 
==355== 
==355== Process terminating with default action of signal 11 (SIGSEGV)
==355==  Access not within mapped region at address 0x8
==355==    at 0x4267EA: ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::delete_node(ft::node<ft::pair<int const, int> >*) (tree.hpp:183)
==355==    by 0x420396: ft::map<int, int, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::erase(ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >) (map.hpp:305)
==355==    by 0x420247: ft::map<int, int, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > >::erase(ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >, ft::map_iterator<ft::tree<ft::node<ft::pair<int const, int> >, std::less<int>, std::allocator<ft::node<ft::pair<int const, int> > > > >) (map.hpp:317)
==355==    by 0x41C1F5: hassanErase() (map_tests.cpp:473)
==355==    by 0x41C567: mapTests() (map_tests.cpp:485)
==355==    by 0x414703: main (main.cpp:11)
==355==  If you believe this happened as a result of a stack
==355==  overflow in your program's main thread (unlikely but
==355==  possible), you can try to increase the size of the
==355==  main thread stack using the --main-stacksize= flag.
==355==  The main thread stack size used in this run was 8388608.
==355== 
==355== HEAP SUMMARY:
==355==     in use at exit: 2,304 bytes in 63 blocks
==355==   total heap usage: 71 allocs, 8 frees, 76,224 bytes allocated
==355== 
==355== LEAK SUMMARY:
==355==    definitely lost: 128 bytes in 2 blocks
==355==    indirectly lost: 448 bytes in 7 blocks
==355==      possibly lost: 0 bytes in 0 blocks
==355==    still reachable: 1,728 bytes in 54 blocks
==355==         suppressed: 0 bytes in 0 blocks
==355== Rerun with --leak-check=full to see details of leaked memory
==355== 
==355== Use --track-origins=yes to see where uninitialised values come from
==355== For lists of detected and suppressed errors, rerun with: -s
==355== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
